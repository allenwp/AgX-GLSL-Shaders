kNormLog2Min = -10;
kNormLog2Max = Rationalize[6.5];
kMidGray = Rationalize[0.18];
kPower = Rationalize[1.5];
kSlope = Rationalize[2.4];
kXPivot = Abs[kNormLog2Min/(kNormLog2Max - kNormLog2Min)];
kYPivot = kMidGray^(Rationalize[1.0/2.4]);

equationScale[transitionX_, transitionY_, power_, slope_] := Module[
   {termA, termB},
   termA = (slope*(Rationalize[1 - transitionX]))^(Rationalize[-1*
        power]);
   termB =  
    SetPrecision[((slope*(Rationalize[1 - transitionX]))/(Rationalize[
           1 - transitionY]))^(power) - 1, 20];
    (termA * termB)^(Rationalize[-1 / power])
   ];

exponentialCurve[x_, scaleInput_, xPivot_, yPivot_, power_, 
  slope_] := (scaleInput * 
    exponential[(slope*(x - xPivot))/scaleInput, power]) + yPivot

exponential[x_, power_] := x / ((1 + (x^power))^(1/power))

calculateSigmoid[x_, xPivot_, yPivot_] := Module[{ scaleValue},
   scaleValue = 
    If[x < xPivot, -1*
      equationScale[1.0 - xPivot, 1.0 - yPivot, kPower, kSlope], 
     equationScale[xPivot, yPivot, kPower, kSlope]];
   exponentialCurve[x, scaleValue, xPivot, yPivot, kPower, kSlope]
   ];

Print["x<xPivot:"]
Assuming[x < kXPivot, 
 N[Simplify[calculateSigmoid[x, kXPivot, kYPivot]], 20]]
Print["x>=xPivot:"]
Assuming[x >= kXPivot, 
 N[Simplify[calculateSigmoid[x, kXPivot, kYPivot]], 20]]

Print["log2 min:"]
N[Log2[(2^kNormLog2Min)*kMidGray], 20]
Print["log2 max:"]
N[Log2[(2^kNormLog2Max)*kMidGray], 20]